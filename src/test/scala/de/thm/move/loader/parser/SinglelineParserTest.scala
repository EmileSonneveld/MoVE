/**
 * Copyright (C) 2016 Nicola Justus <nicola.justus@mni.thm.de>
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */

package de.thm.move.loader.parser

import de.thm.move.MoveSpec
import de.thm.move.loader.parser.PropertyParser._
import de.thm.move.loader.parser.ast._

class SinglelineParserTest extends MoveSpec {
	"The parser" should "parse singleline annotations" in {
		val oneLine =
		"""
		model test4
		annotation( Icon (  coordinateSystem(  extent = {{0,0},{856,504}}  ), graphics = { Bitmap(  extent = {{466,493}, {817,205}},  fileName = "modelica://test4/quokka.png"  ), Line(  points = {{566,80},{511,97},{596,135},{542,186},{431,175},{414,109},{422,70}},  color = {230,77,77},  pattern = LinePattern.DashDotDot,  thickness = 4.0,  smooth = Smooth.Bezier  ), Ellipse(  lineColor = {102,77,179},  fillColor = {204,204,51},  lineThickness = 4.0,  pattern = LinePattern.DashDot,  fillPattern = FillPattern.Solid,  extent = {{134,477},{326,384}},  endAngle = 360  ), Rectangle(  lineColor = {0,0,0},  fillColor = {204,204,51},  lineThickness = 4.0,  pattern = LinePattern.Solid,  fillPattern = FillPattern.Solid,  extent = {{205,179}, {348,36}}  ), Polygon(  points = {{660,393},{547,335},{637,298},{578,242},{654,237}},           lineColor = {0,0,0},  fillColor = {255,0,0},  lineThickness = 4.0,  pattern = LinePattern.Solid,  fillPattern = FillPattern.Solid,  smooth = Smooth.Bezier  ), Polygon(  points = {{434,235},{358,240},{417,296},{327,333},{440,391}},           lineColor = {0,0,0},  fillColor = {255,0,0},  lineThickness = 4.0,  pattern = LinePattern.Solid,  fillPattern = FillPattern.Solid,  smooth = Smooth.Bezier  ), Line(  points = {{73,469},{143,215}},  color = {0,0,0},  pattern = LinePattern.Dash,  thickness = 4.0  )}) );
		end test4;
		"""

		withParseSuccess(oneLine)
	}

	it should "parse annotations generated by OMEdit" in {
		val str = """
		model test
  annotation(
    Icon(graphics = {Rectangle(origin = {4, 58}, fillColor = {255, 0, 0}, fillPattern = FillPattern.Solid, extent = {{-46, 22}, {46, -22}}), Polygon(origin = {-17.9019, -30.166}, points = {{-12.0981, 30.166}, {-36.0981, -1.834}, {35.9019, -29.834}, {31.9019, 16.166}, {-6.09812, 2.166}, {-12.0981, 30.166}, {-12.0981, 30.166}, {-12.0981, 30.166}})}));
end test;
		"""
		withParseSuccess(str)
	}

	it should "parse models with variable definitions" in {
		val str = """
		model test
			Real x = 0.5;
			Int y = 5;
			String derb = "test";
			Modelica.Electrical.Basic.Analog REsistor res = Resostr();
	annotation(
		Icon(graphics = {Rectangle(origin = {4, 58}, fillColor = {255, 0, 0}, fillPattern = FillPattern.Solid, extent = {{-46, 22}, {46, -22}}), Polygon(origin = {-17.9019, -30.166}, points = {{-12.0981, 30.166}, {-36.0981, -1.834}, {35.9019, -29.834}, {31.9019, 16.166}, {-6.09812, 2.166}, {-12.0981, 30.166}, {-12.0981, 30.166}, {-12.0981, 30.166}})}));
end test;
		"""
		withParseSuccess(str)
	}

	it should "parse models with variables and other annotations" in {
		val str = """
		model test
			Real x = 0.5;
			Int y = 5;
			String derb = "test";
			Modelica.Electrical.Basic.Analog REsistor res = Resostr();
	annotation(
		Documentation(<html></html>)
		Diagram({asöldkfjasdf}),
		Icon(graphics = {Rectangle(origin = {4, 58}, fillColor = {255, 0, 0}, fillPattern = FillPattern.Solid, extent = {{-46, 22}, {46, -22}}), Polygon(origin = {-17.9019, -30.166}, points = {{-12.0981, 30.166}, {-36.0981, -1.834}, {35.9019, -29.834}, {31.9019, 16.166}, {-6.09812, 2.166}, {-12.0981, 30.166}, {-12.0981, 30.166}, {-12.0981, 30.166}})}));
end test;
		"""
		withParseSuccess(str)
	}

	it should "parse complexer icon definitions" in {
		val str = """
		model test
		Real x = 0.5;
		Int y = 5;
		String derb = "test";
		Modelica.Electrical.Basic.Analog REsistor res = Resostr();
		annotation(
			Documentation(<html></html>)
			Diagram({asöldkfjasdf}),
			Icon (  coordinateSystem(  extent = {{0,0},{800,500}}  ), graphics = { Rectangle(  origin = {209,372},  lineColor = {0,0,0},  fillColor = {255,0,0},  lineThickness = 4.0,  pattern = LinePattern.Solid,  fillPattern = FillPattern.Solid,  extent = {{-69,69}, {69,-69}}  ), Rectangle(  origin = {596,392},  lineColor = {0,0,0},  fillColor = {102,128,230},  lineThickness = 4.0,  pattern = LinePattern.Solid,  fillPattern = FillPattern.Horizontal,  extent = {{-123,58}, {123,-58}}  ), Line(  origin = {255,199},  points = {{-137,47},{137,-47}},  color = {255,102,102},  pattern = LinePattern.DashDot,  thickness = 4.0  ), Line(  origin = {543,210},  points = {{13,68},{-33,-1},{73,35},{13,-39},{120,-52},{-4,-78},{-109,-2},{-52,51}},  color = {230,230,77},  pattern = LinePattern.Dash,  thickness = 4.0,  smooth = Smooth.Bezier  ), Ellipse(  origin = {179,128},  lineColor = {230,230,77},  fillColor = {102,128,230},  lineThickness = 4.0,  pattern = LinePattern.Solid,  fillPattern = FillPattern.Forward,  extent = {{-113,53}, {113,-53}},  endAngle = 360  )}) );
		end test;
		"""
		withParseSuccess(str)
	}

	it should "parse several models" in {
		val str = """
		model test
		Real x = 0.5;
		Int y = 5;
		String derb = "test";
		Modelica.Electrical.Basic.Analog REsistor res = Resostr();
annotation(
	Documentation(<html></html>)
	Diagram({asöldkfjasdf}),
		annotation( Icon (  coordinateSystem(  extent = {{0,0},{800,500}}  ), graphics = { Rectangle(  origin = {209,372},  lineColor = {0,0,0},  fillColor = {255,0,0},  lineThickness = 4.0,  pattern = LinePattern.Solid,  fillPattern = FillPattern.Solid,  extent = {{-69,69}, {69,-69}}  ), Rectangle(  origin = {596,392},  lineColor = {0,0,0},  fillColor = {102,128,230},  lineThickness = 4.0,  pattern = LinePattern.Solid,  fillPattern = FillPattern.Horizontal,  extent = {{-123,58}, {123,-58}}  ), Line(  origin = {255,199},  points = {{-137,47},{137,-47}},  color = {255,102,102},  pattern = LinePattern.DashDot,  thickness = 4.0  ), Line(  origin = {543,210},  points = {{13,68},{-33,-1},{73,35},{13,-39},{120,-52},{-4,-78},{-109,-2},{-52,51}},  color = {230,230,77},  pattern = LinePattern.Dash,  thickness = 4.0,  smooth = Smooth.Bezier  ), Ellipse(  origin = {179,128},  lineColor = {230,230,77},  fillColor = {102,128,230},  lineThickness = 4.0,  pattern = LinePattern.Solid,  fillPattern = FillPattern.Forward,  extent = {{-113,53}, {113,-53}},  endAngle = 360  )}) );
		end test;

		model test2
		Real x = 0.5;
		Int y = 5;
		Modelica.Electrical.Basic.Analog REsistor res = Resostr();
annotation(
	Diagram({asöldkfjasdf}),
		annotation( Icon (  coordinateSystem(  extent = {{0,0},{800,500}}  ), graphics = { Rectangle(  origin = {209,372},  lineColor = {0,0,0},  fillColor = {255,0,0},  lineThickness = 4.0,  pattern = LinePattern.Solid,  fillPattern = FillPattern.Solid,  extent = {{-69,69}, {69,-69}}  ), Rectangle(  origin = {596,392},  lineColor = {0,0,0},  fillColor = {102,128,230},  lineThickness = 4.0,  pattern = LinePattern.Solid,  fillPattern = FillPattern.Horizontal,  extent = {{-123,58}, {123,-58}}  ), Line(  origin = {255,199},  points = {{-137,47},{137,-47}},  color = {255,102,102},  pattern = LinePattern.DashDot,  thickness = 4.0  ), Line(  origin = {543,210},  points = {{13,68},{-33,-1},{73,35},{13,-39},{120,-52},{-4,-78},{-109,-2},{-52,51}},  color = {230,230,77},  pattern = LinePattern.Dash,  thickness = 4.0,  smooth = Smooth.Bezier  ), Ellipse(  origin = {179,128},  lineColor = {230,230,77},  fillColor = {102,128,230},  lineThickness = 4.0,  pattern = LinePattern.Solid,  fillPattern = FillPattern.Forward,  extent = {{-113,53}, {113,-53}},  endAngle = 360  )}) );
		end test2;
		"""
		withParseSuccess(str)
	}

	it should "parse multiple annotations on the same line" in {
		val str = """
		model test
		Real x = 0.5;
		Int y = 5;
		String derb = "test";
		Modelica.Electrical.Basic.Analog REsistor res = Resostr();
		annotation(
			Documentation(<html></html>), Diagram({asöldkfjasdf}), Icon (  coordinateSystem(  extent = {{0,0},{800,500}}  ), graphics = { Rectangle(  origin = {209,372},  lineColor = {0,0,0},  fillColor = {255,0,0},  lineThickness = 4.0,  pattern = LinePattern.Solid,  fillPattern = FillPattern.Solid,  extent = {{-69,69}, {69,-69}}  ), Rectangle(  origin = {596,392},  lineColor = {0,0,0},  fillColor = {102,128,230},  lineThickness = 4.0,  pattern = LinePattern.Solid,  fillPattern = FillPattern.Horizontal,  extent = {{-123,58}, {123,-58}}  ), Line(  origin = {255,199},  points = {{-137,47},{137,-47}},  color = {255,102,102},  pattern = LinePattern.DashDot,  thickness = 4.0  ), Line(  origin = {543,210},  points = {{13,68},{-33,-1},{73,35},{13,-39},{120,-52},{-4,-78},{-109,-2},{-52,51}},  color = {230,230,77},  pattern = LinePattern.Dash,  thickness = 4.0,  smooth = Smooth.Bezier  ), Ellipse(  origin = {179,128},  lineColor = {230,230,77},  fillColor = {102,128,230},  lineThickness = 4.0,  pattern = LinePattern.Solid,  fillPattern = FillPattern.Forward,  extent = {{-113,53}, {113,-53}},  endAngle = 360  )}) );
		end test;
		"""
		withParseSuccess(str)
	}
}
